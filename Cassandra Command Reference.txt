-----------------------------start and stop cassandra and view status-----------------------------
service cassandra start
service cassandra stop
service cassandra status

-----------------------------cqlsh Shell Commands-----------------------------
--Connect to cqlsh command shell
cqlsh ip -u user
--By default requests are timedout after 10 seconds, to increase timeout use following syntax
cqlsh ip -u user --request-timeout=100 
cqlsh 192.168.251.34 -u cassandra

--displays a synopsis and a brief description of all cqlsh commands
cqlsh> help

--describes the current cluster of Cassandra and its objects
cqlsh> DESCRIBE CLUSTER 

--lists all the keyspaces in a cluster
cqlsh> DESCRIBE KEYSPACES
cqlsh> DESCRIBE KEYSPACE keyspace_name

--lists all the tables in a keyspace
cqlsh> DESCRIBE TABLES

--provides the description of a table
cqlsh> DESCRIBE TABLE keyspace_name.table_name

--Creating a Keyspace
cqlsh> CREATE KEYSPACE <identifier> WITH <properties>
example: CREATE KEYSPACE kong WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '3'}  AND durable_writes = true;

--Using a Keyspace
cqlsh> USE <identifier>

--Altering a KeySpace
ALTER KEYSPACE <identifier> WITH <properties>
ALTER KEYSPACE “KeySpace Name” WITH replication = {'class': ‘Strategy name’, 'replication_factor' : ‘No.Of  replicas’};

--Dropping a Keyspace
DROP KEYSPACE <identifier>

--Creating a Table
CREATE TABLE  <tablename> ('<column-definition>' , '<column-definition>') (WITH <option> AND <option>)
CREATE TABLE tablename(
   column1 name datatype PRIMARYKEY,
   column2 name data type,
   column3 name data type.
   )

or

CREATE TABLE cycling.cyclist_category ( 
   category text, 
   points int, 
   id UUID, 
   lastname text, 
   PRIMARY KEY (category, points)) 
WITH CLUSTERING ORDER BY (points DESC);

--Altering a Table
ALTER TABLE  <tablename> <instruction>
ALTER TABLE table name ADD  new column datatype;
ALTER table name DROP column name;

--Dropping a Table
DROP TABLE <tablename>

--Truncating a Table
TRUNCATE <tablename>

--Creating an Index using Cqlsh
CREATE INDEX <identifier> ON <tablename>
cqlsh> CREATE INDEX name ON emp1 (emp_name);

--Dropping an Index
DROP INDEX <identifier>
cqlsh> drop index name;

--Creating Data in a Table
INSERT INTO <tablename> (<column1 name>, <column2 name>....) VALUES (<value1>, <value2>....) USING <option>

--Updating Data in a Table
UPDATE <tablename> SET <column name> = <new value> <column name> = <value>.... WHERE <condition>
cqlsh> UPDATE emp SET emp_city='Delhi',emp_sal=50000  WHERE emp_id=2;

--Reading Data using Select Clause
SELECT FROM <tablename>
select * from emp;
SELECT emp_name, emp_sal from emp;

--Where Clause
SELECT FROM <table name> WHERE <condition>;
SELECT * FROM emp WHERE emp_sal=50000;

--Deleting Data from a Table
DELETE FROM <identifier> WHERE <condition>;
DELETE emp_sal FROM emp WHERE emp_id=3;
--Deleting an Entire Row
DELETE FROM emp WHERE emp_id=3;

--This command is used to expand the output.
cqlsh> expand on;
cqlsh> select * from emp;
@ Row 1
-----------+------------
    emp_id | 1
  emp_city | Hyderabad
  emp_name | ram
 emp_phone | 9848022338
   emp_sal | 50000
  
@ Row 2
-----------+------------
    emp_id | 2
  emp_city | Delhi
  emp_name | robin
 emp_phone | 9848022339
   emp_sal | 50000
  
@ Row 3
-----------+------------
    emp_id | 4
  emp_city | Pune
  emp_name | rajeev
 emp_phone | 9848022331
   emp_sal | 30000
  
@ Row 4
-----------+------------
    emp_id | 3
  emp_city | Chennai
  emp_name | rahman
 emp_phone | 9848022330
   emp_sal | 50000
(4 rows)
cqlsh> expand off;

--shows the current consistency level, or sets a new consistency level.
cqlsh> CONSISTENCY
--sets consistency to 3
cqlsh> CONSISTENCY THREE;

--Captures the output of a command and adds it to a file. 
cqlsh> CAPTURE '/dbdata2/Outputfile'
cqlsh> SELECT * FROM kong.targets ;
cqlsh> capture off;

--copies data to and from Cassandra to a file.
cqlsh> COPY kong.targets to '/dbdata1/copy'
cqlsh> COPY kong.targets from '/dbdata1/copy' ;

--Using this command, you can execute the commands in a file
cqlsh> source '/dbdata1/test'

cqlsh> show host
cqlsh> show version

--This command is used to terminate the cql shell.
cqlsh> exit

-----------------------------Administration Commands-----------------------------
--create supersuser role
CREATE ROLE root_user_name with SUPERUSER = true AND LOGIN = true and PASSWORD = 'password';

--Alter users's password
ALTER user user_name WITH PASSWORD=’new_password’ 

--grant permissions to role
GRANT SELECT ON TABLE keyspace.table  TO role;
GRANT MODIFY ON TABLE keyspace.table TO role;
GRANT ALL PERMISSIONS ON KEYSPACE keyspace TO role;

--list roles
list roles;
LIST ALL PERMISSIONS OF role;

--drop role
drop role role;

--backup
nodetool snapshot

--list snapshots
nodetool listsnapshots

--Loads newly placed SSTables onto the system without a restart(restore)
nodetool refresh keyspace_name table_name 

--repairs one or more nodes in a cluster, and provides options for restricting repair to a set of nodes
nodetool repair 
example: Following cammand repairs system_auth key space
nodetool repair system_auth

--removes the identified dead node
nodetool removenode Host_ID
--monitors removal progress
nodetool removenode status

--flush memtables to disk
nodetool flush

--Flushes all memtables from the node to SSTables on disk, stops listening for connections from the client and other nodes. 
nodetool drain

--removes the identified live node
nodetool decommission Host_ID
--monitors removal and repair progress
nodetool netstats

--outputs the contents of the specified SSTable in the JSON format
sstabledump sstable_file
sstabledump /dbdata1/cassandra/apache-cassandra-3.11.3/data/data/excelsior/users-c3b08c01c48211e8852bbfee84217487/mc-49-big-Data.db

--get node and sstable of a key
nodetool getendpoints keyspace table key
nodetool getsstables keyspace table key
nodetool getendpoints kong targets 27c41547-d1ea-4933-bb3a-3f17fcf80df4
nodetool getsstables kong targets 27c41547-d1ea-4933-bb3a-3f17fcf80df4
-----------------------------Monitoring Commands-----------------------------
--Provide information about the cluster, such as the state, load, and IDs.
1. nodetool status

--Provides node information, such as load and uptime.
2. nodetool info

--Provides usage statistics of thread pools.
3. nodetool tpstat

--Provide statistics about a compaction.
4. nodetool compactionstats

--Provides statistics about one or more tables.
5. nodetool tablestats keyspace.table_name

--Print garbage collection (GC) statistics.
6. nodetool gcstats

--Provides node status and information about the ring.
7. nodetool ring

--Provides statistics about a table
8. nodetool tablehistograms

--Provides the history of compaction operations.
9. nodetool compactionhistory

--Provides the gossip information for the cluster.
10. nodetool  gossipinfo

